version: 2.1


orbs: 
  slack: circleci/slack@4.10.1


jobs:
  deploy:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - slack/notify:
          channel: D03NGPP0EN8 #channel
          event: always
          template: basic_fail_1


  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd frontend
            npm install
            npm run build
            # exit 1
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            # Your code here
            cd backend
            npm install
            npm run build
            # exit 1

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Test front-end
          command: |
            # Your code here
            cd frontend
            npm install
            npm run test
            # exit 1

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Test back-end
          command: |
            # Your code here
            cd backend
            npm install
            npm run test
            # exit 1

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan front-end
          command: |
            # Your code here
            cd frontend
            npm install
            npm audit fix --audit-level=critical
            # exit 1
  
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan back-end
          command: |
            # Your code here
            cd backend
            npm install
            npm audit fix --audit-level=critical
            # exit 1


  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            # Your code here
            aws cloudformation deploy \
            --template-file ansible-play/udaPeople-test_project/.circleci/files/backend.yml \
            --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
            --tags project=udapeople
            # exit 1

# ansible-play\udaPeople-test_project\.circleci\files\backend.yml
# ansible-play\udaPeople-test_project\.circleci\config.yml
# ansible-play\udaPeople-test_project\.circleci\files\backend.yml
      # - run:
      #     name: Ensure front-end infrastructure exist
      #     command: |
      #       aws cloudformation deploy \
      #         --template-file .circleci/files/frontend.yml \
      #         --tags project=front-tag \
      #         --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
      #         --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      #         exit 1
      # - run:
      #     name: Add back-end ip to ansible inventory
      #     command: |
      #       # Your code here
      #       aws cloudformation describe-stacks --query 'Reservations[*].Instances[*].PublicIpAddress' --output text echo 'ansible_host={{ PublicIp }}' >> .circleci/files/inventory
      #       exit 1
      # - persist_to_workspace:
      #     root: ~/
      #     paths:
      #       - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure
      # if curl -s http://localhost:3000/healthcheck | grep -q '<h1>OK</h1>'
      # then
      #   echo "Front-end is up"
      # else
      #   echo "Front-end is down"
      #   exit 1
      # fi
            

workflows:
  my-workflow:
    jobs:
      # - build-frontend
      # - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      # - scan-backend:
      #     requires: [build-backend]
      # - deploy:
      #     context: slack-secrets
      - deploy-infrastructure
