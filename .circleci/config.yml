version: 2.1

commands:
  destroy_environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.

    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            aws cloudformation delete-stack --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
            aws cloudformation delete-stack --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
            # exit 1

orbs: 
  slack: circleci/slack@4.10.1


jobs:
  deploy:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - slack/notify:
          channel: D03NGPP0EN8 #channel
          event: always
          template: basic_fail_1


  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd frontend
            npm install
            npm run build
            # exit 1
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            # Your code here
            cd backend
            npm install
            npm run build
            # exit 1

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Test front-end
          command: |
            # Your code here
            cd frontend
            npm install
            npm run test
            # exit 1

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Test back-end
          command: |
            # Your code here
            cd backend
            npm install
            npm run test
            # exit 1

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan front-end
          command: |
            # Your code here
            cd frontend
            npm install
            npm audit fix --audit-level=critical
            # exit 1
  
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan back-end
          command: |
            # Your code here
            cd backend
            npm install
            npm audit fix --audit-level=critical
            # exit 1


  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            # Your code here
            aws cloudformation deploy \
            --template-file .circleci/files/backend.yml --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
            --tags project=udapeople
            # exit 1

      - run:
          name: Ensure front-end infrastructure exist
          command: |
            # Your code here
            aws cloudformation deploy \
            --template-file .circleci/files/frontend.yml \
            --tags project=front-tag \
            --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
              # exit 1

      - run:
          name: Add back-end ip to ansible inventory
          command: |
            # Your code here
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople" \
              --output text >> ~/project/.circleci/ansible/inventory.txt
            # exit 1

      - persist_to_workspace:
          root: ~
          paths:
            - project/.circleci/ansible/inventory.txt

      # Here's where you will add some code to rollback on failure
      - destroy_environment
        # when: on_fail
          # exit 1
  configure_infrastructure:
    docker:
      - image: python:3.7.3-alpine3.16
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["0d:42:f7:5c:da:67:b6:9c:d2:0e:3b:50:b2:56:7c:f1"]
      - attach_workspace:
          at: ~
      - run:
          name: Install dependencies (openssh)
          command: |
            apk add --update openssh # Install openssh
      - run:
          name: Install git
          command: |
            apk add --update git # Install git

      - run:
          name: Install dependencies (ansible)
          command: |
            apk add --update ansible # Install ansible

      - run:
          name: Run your playbook to configure server
          command: |
            apk add --update awscli # Install awscli
      
      - run: yum install -y tar gzip

      - run:
          name: Run your playbook to configure server
          command: |
            cd .circleci/ansible
            ansible-playbook configure-server.yml -i inventory.txt
      - destroy_environment
        # when: on_fail

  run_migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            # Your code here
            cd backend
            npm install
            npm run migrate > migrations_dump.txt
            # exit 1
      - run:
          name: Send migration results to memstash
          command: |
            # Your code here
            curl -X POST -H "Content-Type: application/json" -d @migrations_dump.txt http://memstash:8080/migrations
            exit 1
          # Here's where you will add some code to rollback on failure
      - destroy_environment
        # when: on_fail

      # - run: apk add --update curl
      # - run:
      #     command: |
      #       # Your code here
      #       if curl -s --head $(cat ~/.circleci/ansible/inventory.txt)
      #       then
      #         echo "Front-end is up"
      #       else
      #         echo "Front-end is down"
      #       fi
      #         # exit 1
      # - run:
      #     command: destroy_environent
      #     when: on_fail
                  

workflows:
  my-workflow:
    jobs:
      # - build-frontend
      # - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      # - scan-backend:
      #     requires: [build-backend]
      # - deploy:
      #     context: slack-secrets
      - deploy-infrastructure
      # - configure_infrastructure:
      #     requires: [deploy-infrastructure]
