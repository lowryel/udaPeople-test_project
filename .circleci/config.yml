version: 2.1

commands:
  destroy_environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.

    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            aws cloudformation delete-stack --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
            aws cloudformation delete-stack --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    # parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            if curl -s ${CIRCLE_WORKFLOW_ID} | grep -q "SUCCESS"; 
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
             cd ~/project/backend
             npm install
            #  Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi

orbs: 
  slack: circleci/slack@4.10.1


jobs:
  deploy:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - slack/notify:
          channel: D03NGPP0EN8 #channel
          event: fail
          template: basic_fail_1


  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd frontend
            npm install
            npm run build
            # exit 1
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            # Your code here
            cd backend
            npm install
            npm run build
            # exit 1

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Test front-end
          command: |
            # Your code here
            cd frontend
            npm install
            npm run test
            # exit 1

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Test back-end
          command: |
            # Your code here
            cd backend
            npm install
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan front-end
          command: |
            # Your code here
            cd frontend
            npm install
            npm audit fix --audit-level=critical
  
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan back-end
          command: |
            # Your code here
            cd backend
            npm install
            npm audit fix --audit-level=critical


  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            # Your code here
            aws cloudformation deploy --template-file .circleci/files/backend.yml \
            --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            # Your code here
            aws cloudformation deploy --template-file .circleci/files/frontend.yml \
            --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople
      - run:
          no_output_timeout: 10s
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text >> .circleci/ansible/inventory.txt

      - persist_to_workspace:
          root: .circleci/ansible
          paths:
            - inventory.txt

      # Here's where you will add some code to rollback on failure
      - destroy_environment
        # when: on_fail

  configure-infrastructure:
    docker:
      - image: python:3.10.5-alpine3.16
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["0d:42:f7:5c:da:67:b6:9c:d2:0e:3b:50:b2:56:7c:f1"]
      - attach_workspace:
          at: .circleci/ansible
      - run:
          name: Install dependencies (openssh)
          command: |
            apk add --update openssh # Install openssh
      - run:
          name: Install dependencies (git)
          command: |
            apk add --update git # Install git

      - run:
          name: Install dependencies (ansible)
          command: |
            apk add --update ansible # Install ansible

      - run:
          name: Install dependencies (awscli)
          command: |
            apk --no-cache add py-pip
            pip install awscli

      - run: 
          name: Install dependencies (tar and gzip)
          command: |
            apk add --update tar gzip

      - run:
          name: Run your playbook to configure server
          command: |
            cd .circleci/ansible
            ansible-playbook configure-server.yml -i inventory
      - destroy_environment
        # when: on_fail

  run_migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            # Your code here
            cd backend
            npm install
            npm run migrate > migrations_dump.txt
            # exit 1
      - run:
          name: Send migration results to kdvb-backend
          command: |
            # Your code here
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl https://kdvb.io/Jze7137FJQmQJfQUGyUYaH/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi

            # exit 1
          # Here's where you will add some code to rollback on failure
      - destroy_environment
      - revert_migrations
        # when: on_fail


  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - attach_workspace:
          at: .circleci/ansible
      - run:
          name: Install dependencies (python)
          command:
            # Your code here
            apk add --update python
      - run:
          name: Install dependencies (ansible)
          command: |
            # Your code here
            apk add --update ansible
      - run:
          name: Install dependencies (awscli)
          command: |
            # Your code here
            apk add --update awscli
      - run:
          name: Install dependencies (Node.js and NPM)
          command: |
            apt-get update && apt-get install -y nodejs npm
      - run:
          name: Get backend url
          command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL=${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
            cd frontend
            npm install
            npm run build
            tar -czvf artifact "${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist "udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive

      - destroy_environment

  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.10.5-alpine3.16
    steps:
      # Checkout code from git
      - checkout
      - add_ssh_keys:
          fingerprints: ["0d:42:f7:5c:da:67:b6:9c:d2:0e:3b:50:b2:56:7c:f1"]
      # attach workspace
      - attach_workspace:
          at: .circleci/ansible
      - run:
          name: Install dependencies (Nodejs and NPM)
          command: |
            apt-get update && apt-get install -y nodejs npm
      - run:
          name: Install dependencies (python)
          command: |
            apk add --update python
      - run:
          name: Install dependencies (ansible)
          command: |
            apk add --update ansible
      - run:
          name: Deploy backend
          command: |
            # your code here
            cd backend
            npm i
            npm run build
            cd ..
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents of the inventory file is ..."
            cat inventory
            ansible-playbook -i inventory deploy-backend.yml      
      # Here's where you will add some code to rollback on failure
      - destroy_environment

      # - run: apk add --update curl
      # - run:
      #     command: |
      #       # Your code here
      #       if curl -s --head $(cat ~/.circleci/ansible/inventory.txt)
      #       then
      #         echo "Front-end is up"
      #       else
      #         echo "Front-end is down"
      #       fi
      #         # exit 1
      # - run:
      #     command: destroy_environent
      #     when: on_fail
                  

workflows:
  my-workflow:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
      - deploy:
          context: slack-secrets
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          # filters:
          #   branches:
          #     only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]

